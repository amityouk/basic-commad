https://phoenixnap.com/kb/install-minikube-on-centos

minikube start --extra-config=kubeadm.ignore-preflight-errors=NumCPU --force --cpus=1


 terraform destroy --auto-approve -lock=false
terraform init -migrate-state # migrate bekend 

terraform { 
 backend "s3" {
    bucket                 = "terraformy"
    key                    = "state/terraform.tfstate"
    region                 = "us-east-1"
    encrypt                = true
    dynamodb_table = "terraformy_tf_lockid"
  }
}

#LockID



Stores the state as a given key in a given bucket on Amazon S3. This backend also supports state locking and consistency 
checking via Dynamo DB, which can be enabled by setting the dynamodb_table field to an existing DynamoDB table name. A single DynamoDB table can be used to lock multiple remote state files. 
Terraform generates key names that include the values of the bucket and key variables.


############### Configure the AWS Provider ############################
provider "aws" {
  region = "us-east-1"
}


#############################generated key #######

variable "generated_key_name" {
  type        = string
  default     = "terraform-key-pair"
  description = "Key-pair generated by Terraform"
}

resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" {    # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }

}





###############################VPC#########################################
resource "aws_vpc" "terra-vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "terra-vpc-main"
  }
}

###############################internet_gateway#############################
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.terra-vpc.id

  tags = {
    Name = "igw-main"
  }
}

#################################Subnet########################################
resource "aws_subnet" "terr-sub-main" {
  vpc_id     = aws_vpc.terra-vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "main-subnet"
  }
}

###############################Route table ##############################
resource "aws_route_table" "route-table" {
  vpc_id = aws_vpc.terra-vpc.id

  route = []

  tags = {
    Name = "terr_route_table"
  }
}

####################################route####################################
resource "aws_route" "route" {
  route_table_id            = aws_route_table.route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.igw.id
  depends_on                = [aws_route_table.route-table]
}

#####################################security-group##########################

resource "aws_security_group" "allow_tls" {
  name        = "allow_all_traffic"
  description = "Allow all inbound traffic"
  vpc_id      = aws_vpc.terra-vpc.id

  ingress {
    description      = "all traffic"
    from_port        = 0 # all ports
    to_port          = 0 # all ports
    protocol         = "-1" # all traffic
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = null
    prefix_list_ids = null
    security_groups = null
    self = null
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
    description = "Outbound rule"
    prefix_list_ids = null
    security_groups = null
    self = null
  }

  tags = {
    Name = "allow_traffic"
  }
}


#####################route_table_association########################

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.terr-sub-main.id
  route_table_id = aws_route_table.route-table.id
}


##################################EC2 instance######################
resource "aws_instance" "web" {
  ami           = "ami-0889a44b331db0194"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.terr-sub-main.id # infomration creation in ec2 in the subnet
  key_name   = "terraform-key-pair"
  tags = {
    Name = "website"
  }
}

#################################################################################
